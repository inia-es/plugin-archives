<?php

/**
 * @file CounterPlugin.inc.php
 *
 * Copyright (c) 2003-2011 John Willinsky
 * Distributed under the GNU GPL v2. For full terms see the file docs/COPYING.
 *
 * @class CounterPlugin
 * @ingroup plugins_generic_counter
 *
 * @brief COUNTER plugin; provides COUNTER statistics.
 */


import('lib.pkp.classes.plugins.GenericPlugin');

class ArchivesPlugin extends GenericPlugin {
	/**
	 * Called as a plugin is registered to the registry
	 * @param $category String Name of category plugin was registered to
	 * @return boolean True iff plugin initialized successfully; if false,
	 * 	the plugin will not be registered.
	 */
	function register($category, $path) {
		$success = parent::register($category, $path);
		if ($success && $this->getEnabled()) {

			HookRegistry::register ('Templates::Editor::Index::Submissions', array(&$this, 'displayMenuArchives'));	
		        HookRegistry::register ('LoadHandler', array(&$this, 'handleRequest'));
	                }	
		return $success;
	}
	

	function getDisplayName() {
		return Locale::translate('plugins.generic.Archives.displayName');
	}

	function getDescription() {
		return Locale::translate('plugins.generic.Archives.description');
	}

         /**
	 * Get the Template path for this plugin.
	 */	
	function getTemplatePath() {
		return parent::getTemplatePath() . 'templates' . DIRECTORY_SEPARATOR ;
	}
	function displayMenuArchives($hookName, $args) {
//				exit("salir plugin");
		$params =& $args[0];
		$smarty =& $args[1];
		$output =& $args[2];
		$output .= '   <ul>  <li>&#187; <a href="'. Request::url(null,'archives','submissions','submissionsArchivesArchived') .'">'.Locale::translate('plugins.generic.Archives.submissionsArchived').'</a></li>';
		$output .= '     <li>&#187; <a href="'. Request::url(null,'archives','submissions','submissionsArchivesPublished') .'">'.Locale::translate('plugins.generic.Archives.submissionsPublished').'</a></li>';
		$output .= '     <li>&#187; <a href="'. Request::url(null,'archives','submissions','submissionsArchivesDeclined') .'">'.Locale::translate('plugins.generic.Archives.submissionsDeclined').'</a></li></ul>';
		return false;
	}

	function handleRequest($hookName, $args) {
		$page =& $args[0];
		$op =& $args[1];
		$sourceFile =& $args[2];

		// If the request is for the log analyzer itself, handle it.
		if ($page === 'archives') {
			$this->import('ArchivesHandler');
			Registry::set('plugin', $this);
			define('HANDLER_CLASS', 'ArchivesHandler');
			$this->import('EditorSubmissionArchivesDAO');
			$editorSubmissionArchivesDAO = new EditorSubmissionArchivesDAO();
			DAORegistry::registerDAO('EditorSubmissionArchivesDAO', $editorSubmissionArchivesDAO);
			return true;
		}

		return false;
	} 
	
	function getManagementVerbs() {
		$verbs = array();

		if ($this->getEnabled()) {
			$verbs[] = array('archives', 'archives');
                        
			$verbs[] = array('submissions', 'submissions');
			
		}
		return parent::getManagementVerbs($verbs);
	}

 	/*
 	 * Execute a management verb on this plugin
 	 * @param $verb string
 	 * @param $args array
	 * @param $message string Location for the plugin to put a result msg
 	 * @return boolean
 	 */
	function manage($verb, $args, &$message) {
		if (!parent::manage($verb, $args, $message)) return false;
		switch ($verb) {
			case 'submissions':
				Request::redirect('index', 'archives');
				return false;
			case 'archives':
				Request::redirect(null, 'archives');
				return false;
			default:
				// Unknown management verb
				assert(false);
				return false;
		}
	}
}	
?>
